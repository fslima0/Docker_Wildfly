image: maven:latest

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  CI_REGISTRY: "registry.gitlab.com"
  CI_REGISTRY_IMAGE: "${CI_REGISTRY}/fslima0/gate"
  
cache:
  paths:
    - .m2/repository/
    - target/
  
stages:
 - build
 - test
 - package
 - release
 - deploy

.tests-tag:
  rules:
    - if: '$CI_COMMIT_TAG =~ /^.*-rc.*$/'
      when: on_success

.tests-branch: &tests-branch
  rules:
    - if: '$CI_COMMIT_TAG =~ /^.*-rc.*$/ && $CI_COMMIT_BRANCH == "master"'
      when: manual

include:
  - template: Jobs/Code-Quality.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml

build:
 stage: build
 script:
   - mvn compile 

test:
 stage: test
 script:
   - mvn test

package:
 extends: .tests-tag
 stage: package
 script:
   - mvn -DskipTests=true package
 artifacts:
   paths:
     - target/*.war

release:
 extends: .tests-tag
 stage: release
 dependencies:
   - build
   - test
   - package
 image: docker:20.10.8
 services:
   - docker:20.10.8-dind
 variables:
    IMAGE:  $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    LATEST: $CI_REGISTRY_IMAGE:rc
 before_script:
   - docker info
   - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
 script:
   - docker pull $CI_REGISTRY_IMAGE:rc || true
   - docker build --cache-from $LATEST --tag $IMAGE --tag $LATEST .
   - docker push $IMAGE
   - docker push $LATEST

deploy_staging:
 extends: .tests-tag
 stage: deploy
 image: docker:20.10.8
 environment:
   name: staging
   url: http://your_server_IP:8080
 before_script:
   - apk --update --no-cache add sshpass
 script:
   - sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
   - sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER docker container rm -f my-app || true
   - sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER docker run -d -p 8080:8080 -p 9990:9990 --name my-app $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

deploy_production:
 <<: *tests-branch
 stage: deploy
 image: maven:latest
 dependencies:
    - package
 environment:
   name: production
   url: http://your_server_IP:8080
 script:
   - /opt/jboss/wildfly/bin/jboss-cli.sh --connect --controller=${HOST_WILDFLY} --user=${USER_WILDFLY} --password=${PASS_WILDFLY} --commands="deploy target/my-app.war --force"
